<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 书评 | See MJ !]]></title>
  <link href="http://MengjunChen.github.io/blog/categories/shu-ping/atom.xml" rel="self"/>
  <link href="http://MengjunChen.github.io/"/>
  <updated>2014-06-06T00:39:26+08:00</updated>
  <id>http://MengjunChen.github.io/</id>
  <author>
    <name><![CDATA[Chen Mengjun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[我编程我快乐]]></title>
    <link href="http://MengjunChen.github.io/blog/2014/06/02/wo-bian-cheng-wo-kuai-le/"/>
    <updated>2014-06-02T22:15:00+08:00</updated>
    <id>http://MengjunChen.github.io/blog/2014/06/02/wo-bian-cheng-wo-kuai-le</id>
    <content type="html"><![CDATA[<p>这本书是一本教人如何的书，刚好，它的英文名就是"Creating A Remarkable Career In Software Development"，它是一本关于方法学的书。作者Chad Fowler从一位萨克斯演奏者半路出家成为一名软件开发者，讲述他作为一个音乐人对个人在软件行业中如何发展的思考。</p>

<p>书总共有五个部分，叙述如下：</p>

<p>选择市场，即如何用投资的眼光看待软件行业。要知道这个行业市场的竞争有多么强烈，分分钟有人和你抢饭碗，要的比你少，比你能吃苦和受委屈，做事情效率还比你高，结果还比你好。稍微留意国外的一些网赚网站，随便有人发个需求，不到一个小时就有来自印度的，俄罗斯童鞋一大波在版上讨价还价。投资的眼光是说把自己放到这种范围的激烈竞争环境中，了解市场供需平衡，将对一门新技术的学习当成一种技术投资。当然，投资从来不只是投资本身，你必须思维够独到，切忌孤注一掷，对它有种无法放弃的决绝。</p>

<p>在产品上投资，说的是做事的姿态要低，眼光要高，效率要留意，把自己做事情，学习的过程与所有相关的东西联系起来。比如“我们来为这个公司工作，目的就是为它赚钱或者省钱，但是我们根本就不懂这行是怎么赚钱的”，“忽略行业性质的人，往往会犯低级错误”。作者主张多了解行业详情，特别在互联网年头，作为一名服务行业工作者，光懂的技术往往是可以被替代的，只有在熟悉了业务的范畴，认识到业务的美感之后，在这个行业的地位才可以巩固。而一切都需要你主动出击，主动寻找良师，主动寻找榜样，寻找你可以帮助的人，敢于在大环境中表达自己的想法，主动储备自己的工具箱。真正的提高离不开练习和做事方法的讲究，在工作中，额外的，对比以前写的程序，等等。</p>

<p>执行，首先说说执行力，即快速行动的能力，“帕金森定律”说，完成一个任务需要多长时间，答案是“你给多少时间”。从这点来看的话无非是老生常谈了。独到的是，作者能够从联系的角度看待执行力低下的原因：“我们周围整个环境的速度拖慢了我们的速度”。文章主张把要做的事情看成一种竞赛，尝试为自己营造一种紧迫感。其次结果大于过程。很多时候失败就是失败，不带友谊第一比赛第二这种自我安慰法的。你的执行成果体现在团队成员是否阶段性地了解到了你所做的工作，你能否有阶段性的成果可以展示出来，大到一周，小到一天；别人对你执行成果的评价如何，团队成员更侧重于合作度和领导力，老大更侧重于你对公司的贡献，通过不同人物可以了解到你不同角度的价值所在。最后，时机重要过时间，效率重要过努力。文章提倡八小时激情燃烧，高效率不是有意识说加快速度干巴爹就行了的，在负责多变的要求中，学会根据事情重要程度说不，学会不拖延，不制造心理瓶颈，学会屡败屡战，学会主动沟通，及时反馈尤为重要。</p>

<p>推销自我，经营自己的SEO排名以及G商（即Google搜索排名)。即使表面不承认，自我的评价一定是要有美化作用的，比如我们通常会觉得自己唱歌很好听，敢于在KTV里鬼哭狼嚎。但是既然是推销，当然也重视他人对你的评价，毕竟效益什么的都掌握在他人对你的评价上，你说了不算数。自我推销说白了就是刷存在感。你要积极参与尤其是老大们组织的会议，学会沟通，善于写作，用适当的言语向不同人说明你的想法。在工作以外，我们能做的是发布你编写的程序，创建自己的商标，让自己短时间完成的作品也上得了台面，足够展示给别人看。最后一点，推销自我要借助他人的力量，比如认识重量级的人物并在业界重量级的人物能够知道你！</p>

<p>保持技术领先。选择当程序员，就是选择了一条没有终点的道路。前几天苹果发布了Swift，于是只懂Object C技能的程序员技能清零。留心自己引以为傲的技术是否已经过时是很多工作多年的程序员会忽略的事情。做到这一点最重要的是拥有领先的意识和评价自己的定期参考系。注重积累，只要每天一小步，十年就能成为一个专家了！</p>

<p>本书最特别之处在于它每章节后都有较强实践性的练习。有空可以专门对它们做个整理。书名略挫，内容五星！</p>
]]></content>
  </entry>
  
</feed>
